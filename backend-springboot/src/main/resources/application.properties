# Server Configuration
server.port=8080

spring.kafka.bootstrap-servers=127.0.0.1:9092
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.group-id=order-group
# Producer configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.kafka.consumer.properties.spring.json.trusted.packages=*

# logging.level.org.apache.kafka=DEBUG

# MySQL Configuration (assuming you're using a local MySQL instance)
#spring.datasource.url=jdbc:mysql://localhost:3306/orderealtimedb?useSSL=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/orderealtimedb?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=true

spring.datasource.username=root
spring.datasource.password=
spring.datasource.jpa.hibernate.ddl-auto=update
    # Use 'create', 'update', 'validate', 'none' as needed
spring.datasource.jpa.properties.hibernate.format_sql=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true

# Spring WebSocket Configuration (optional, if using WebSockets)
spring.websocket.enabled=true
advertised.listeners=PLAINTEXT://127.0.0.1:9092

